@startuml drop-down

interface Feedback {
    <b>key functions:</b>
    <b>computeFeedback()</b> - Determine feedback state (via componentBase)
    <b>_onFeedbackSlotChanged()</b> - Place Feedback slot elements\n into the interaction render template
}

Feedback --|> DropDown

note right of DropDown : The interaction.\nContains an HTML render template.\nDefines HTML tag <drop-down>  
class DropDown {
    <b>key functions:</b>
    <b>_render()</b> - Renders the drop down menu using an HTML template
    <b>_onDropDownClicked()</b> Open / close the drop down menu
}

DropDown --> MultipleChoice
note right of MultipleChoice : Super class for all \ninteractions of this type 
class MultipleChoice {
    <b>key functions:</b>
    <b>_onItemClicked</b> - Click handler for option items. Sets the value of the interaction
    <b>match()</b> - Determine if the value of this interaction matches any of the responses
}

MultipleChoice --> ComponentBase
note right of ComponentBase: Super class for all \ninteractions
class ComponentBase<T> {
    <b>showFeedback()</b> - Sets the feedback state of the interaction
    <b>_onSlotChanged()</b> - Place item elements into the interaction render template
}

ComponentBase --> LitElement
note right of LitElement: A simple base class for creating\ncustom elements rendered with lit-html.
class LitElement {
    <b>_render()</b> - Render using an HTML template. Overridden in the interaction
}


@enduml